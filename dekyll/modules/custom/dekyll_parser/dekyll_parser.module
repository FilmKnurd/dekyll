<?php

/**
 * Define the YAML front header separator.
 */
define('YAML_SEPARATOR', "---\n");

/**
 * @file
 * Read and Write Jekyll files.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a setting to group content fields, to determine whether they will be
 * displayed on the mini node form of the browsing widget.
 */
function dekyll_parser_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
  $form['instance']['settings']['jekyll_map'] = array(
    '#title' => t('Jekyll variable name'),
    '#description' => t("Map this field to a Jekyll YAML variable (e.g Drupal's <code>field_tags</code> will map to Jekyll's <code>tags</code>)."),
    '#type' => 'textfield',
    '#default_value' => !empty($instance['settings']['jekyll_map']) ? $instance['settings']['jekyll_map'] : '',
  );
}

/**
 * Implements hook_node_insert().
 */
function dekyll_parser_node_insert($node) {
  dekyll_parser_write_file($node);
}

/**
 * Implements hook_node_update().
 */
function dekyll_parser_node_update($node) {
  dekyll_parser_write_file($node);
}

/**
 * Create a queue item, in order to write a node to file.
 *
 * @param $node
 *   The node to be written.
 */
function dekyll_parser_write_file($node) {
  if ($node->type != 'post') {
    return;
  }

  $queue = DrupalQueue::get('dekyll_write');
  $data = array(
    'nid' => $node->nid,
    // @todo: Remove hardcoding and use a varabile that has all branches we care
    // about.
    'branch' => 'master',
    'commit_message' => '',
  );
  $queue->createItem($data);
}
